#+TITLE: Emacs Configuration via Org-mode
#+AUTHOR: Mario Baars
#+PROPERTY: header-args :tangle "~/.emacs.d/init.el"
#+STARTUP: overview

* Decluttering
** UI-Decluttering
#+begin_src emacs-lisp 
(setq inhibit-start-up-message 1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Undo
#+begin_src emacs-lisp  
(setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src

** Saves Directory
#+begin_src emacs-lisp  
(setq backup-directory-alist '((".*" . "~/.emacs.d/.emacs_saves")))
#+end_src

** Keeping Emacs clean
#+begin_src emacs-lisp  
  (setq delete-old-versions t)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq create-lockfiles nil)
#+end_src

** Custom File
#+begin_src emacs-lisp  
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

* Use Package
#+begin_src emacs-lisp 
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
    (package-refresh-contents))

(unless (package-installed-p 'use-package)
    (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure 't)
#+end_src

* Misc
** Rainbow mode
#+begin_src emacs-lisp 
(use-package rainbow-mode)
#+end_src

** Browser fix
#+begin_src emacs-lisp 
  (setq browse-url-browser-function 'browse-url-firefox
        browse-url-generic-program 'browse-url-firefox
        browse-url-new-window-flag t 
        browse-url-firefox-new-window-is-tab nil)
  (setq browse-url-firefox-arguments nil)
#+end_src

** PDF tools
#+begin_src emacs-lisp 
  (use-package pdf-tools
    :ensure t
    :config 
    (pdf-tools-install))
#+end_src

** Which Key
#+begin_src emacs-lisp  
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1)
    (setq which-key-min-display-lines 3))
#+end_src

** Recursive Minibuffers
#+begin_src emacs-lisp 
(setq enable-recursive-minibuffers t)
#+end_src

** Stay keyboard driven
#+begin_src emacs-lisp 
(setq use-dialog-box nil)
#+end_src

** Line numbers
#+begin_src emacs-lisp  
  (setq display-line-numbers-type 'relative) 
  (global-display-line-numbers-mode) 
#+end_src

** Spaces instead of tabs
#+begin_src emacs-lisp  
  (setq default-tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src

** Electric pair mode
#+begin_src emacs-lisp  
(electric-pair-mode t)
(setq-default electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src

** Disable auto indenting
#+begin_src emacs-lisp 
(when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
#+end_src

** Scrolling
#+begin_src emacs-lisp  
(setq auto-window-vscroll nil)
(customize-set-variable 'fast-but-imprecise-scrolling t)
(customize-set-variable 'scroll-conservatively 101)
(customize-set-variable 'scroll-margin 0)
(customize-set-variable 'scroll-preserve-screen-position t)
#+end_src

** Recentf
#+begin_src emacs-lisp 
  (recentf-mode 1)
#+end_src

** Save-hist
#+begin_src emacs-lisp 
  (setq history-length 30)
  (savehist-mode 1)
#+end_src

** Short answers
#+begin_src emacs-lisp  
(if (boundp 'use-short-answers)
    (setq use-short-answers t)
  (advice-add 'yes-or-no-p :overide #'y-or-n-p))
#+end_src

** Reverting buffers
#+begin_src emacs-lisp  
(customize-set-variable 'global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src

** Docview
#+begin_src emacs-lisp  
(setq doc-view-resolution 200) 
#+end_src

** Winner mode
#+begin_src emacs-lisp 
(winner-mode t)
#+end_src

** Compilation
#+begin_src emacs-lisp 
(setq compilation-scroll-output t)
#+end_src

** Easy closing *Help*
#+begin_src emacs-lisp 
  (setq help-window-select t)
#+end_src

** Minibuffer Window Height
#+begin_src emacs-lisp 
(setq max-mini-window-height 0.10)
#+end_src

* Key bindings
** Window manipulation
#+begin_src emacs-lisp 
  (global-set-key (kbd "C-S-h") 'windmove-swap-states-left)
  (global-set-key (kbd "C-S-j") 'windmove-swap-states-down)
  (global-set-key (kbd "C-S-k") 'windmove-swap-states-up)
  (global-set-key (kbd "C-S-l") 'windmove-swap-states-right)

  (global-set-key (kbd "C-s-j") (lambda() (interactive) (shrink-window-horizontally 8)))
  (global-set-key (kbd "C-s-k") (lambda() (interactive) (enlarge-window-horizontally 8)))
  (global-set-key (kbd "C-s-+") (lambda() (interactive) (enlarge-window 4)))
  (global-set-key (kbd "C-s--") (lambda() (interactive) (shrink-window 4)))
#+end_src

** Random Keybindings
#+begin_src emacs-lisp 
  (global-set-key (kbd "M-ä") 'dabbrev-expand)
  (global-set-key (kbd "C-x c") 'compile)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x 4 RET") 'vterm-other-window)
  (global-set-key (kbd "C-M-ä") 'completion-at-point)
  (global-set-key (kbd "s-<return>") 'multi-vterm)
#+end_src

** No accidental quiting
#+begin_src emacs-lisp 
(global-unset-key "\C-x\C-c")
#+end_src

* Tab bar
#+begin_src emacs-lisp 
  (tab-bar-mode)
  (setq tab-bar-new-tab-choice "*scratch*")
  (setq tab-bar-close-button-show nil
        tab-bar-new-button-show nil)
#+end_src

* Evil Mode
#+begin_src emacs-lisp  
  (use-package evil
      :ensure t
      :init
      (setq evil-want-keybinding nil)
      :config
      (evil-mode t))

  (use-package evil-collection
      :after evil
      :ensure t
      :config
      (evil-collection-init))

  (setq evil-want-minibuffer t)
#+end_src

** Undo-Tree
Evil mode needs undo-tree for undo capability
#+begin_src emacs-lisp 
  (use-package undo-tree)
  (global-undo-tree-mode)
  (setq evil-undo-system 'undo-tree)
  (add-hook 'evil-local-mode-hook 'turn-on-undo-tree-mode)
#+end_src

* Extending Path
#+begin_src emacs-lisp  
(setq exec-path (append exec-path '("/home/mario/.local/bin")))
#+end_src

* Appearance
** Font
#+begin_src emacs-lisp  
  (defvar default-font-size 200)

  (defun set-font-faces()
    (set-face-attribute 'default nil :font "Ubuntu Mono" :weight 'light :height default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Ubuntu Mono" :weight 'light :height default-font-size)
    (set-face-attribute 'variable-pitch nil :font "Noto Sans" :weight 'normal :height default-font-size))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (setq doom-modeline-icon t)
		  (with-selected-frame frame
		    (set-font-faces))))
    (set-font-faces))
#+end_src

** Theme
#+begin_src emacs-lisp  
(use-package doom-themes)
(load-theme 'modus-vivendi)
#+end_src

** Modeline
#+begin_src emacs-lisp  
  (use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 18)))

  (add-hook 'after-init-hook 'doom-modeline-mode)

  ;; doom-modeline configuration
  (customize-set-variable 'doom-modeline-height 15)
  (customize-set-variable 'doom-modeline-bar-width 6)
  (customize-set-variable 'doom-modeline-minor-modes nil)
  (customize-set-variable 'doom-modeline-buffer-file-name-style 'truncate-except-project)

  (use-package all-the-icons)

  (setq display-time-day-and-date t)
  (display-time-mode 1)
  (setq display-time-24hr-format t)
#+end_src

* Completion
** Semantic mode
#+begin_src emacs-lisp 
(semantic-mode)
#+end_src

** Counsel
#+begin_src emacs-lisp 
  (use-package counsel
    :ensure t
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-command-only))
#+end_src

** Consult
#+begin_src emacs-lisp 
  (use-package consult
    :bind
    (;; M-s bindings (search-map)
     ("M-s d" . consult-find)
     ("M-s D" . consult-locate)
     ("M-s g" . consult-grep)
     ("M-s G" . consult-git-grep)
     ("M-s r" . consult-ripgrep)
     ("M-s l" . consult-line)
     ("M-s L" . consult-line-multi)
     ("M-s m" . consult-multi-occur)
     ("M-s k" . consult-keep-lines)
     ("M-s u" . consult-focus-lines)))
#+end_src
   
** Hippie-expand
#+begin_src emacs-lisp 
  (use-package hippie-exp
    :bind ([remap dabbrev-expand] . hippie-expand)
    :commands (hippie-expand)
    :config
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-expand-whole-kill
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol
            try-complete-file-name-partially
            try-complete-file-name
            try-expand-all-abbrevs
            try-expand-list
            try-expand-line)))
#+end_src

** Corfu
#+begin_src emacs-lisp 
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                  ; Allows cycling through candidates
    (corfu-auto t)                   ; Enable auto completion
    (corfu-auto-prefix 2)            ; Enable auto completion
    (corfu-auto-delay 0.0)           ; Enable auto completion
    (corfu-quit-at-boundary 'separator)
    (corfu-echo-documentation 0.25)   ; Enable auto completion
    (corfu-preview-current 'insert)   ; Do not preview current candidate
    (corfu-preselect-first nil)

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-SPC" . corfu-insert-separator)
                ("TAB"     . corfu-next)
                ([tab]     . corfu-next)
                ("S-TAB"   . corfu-previous)
                ([backtab] . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET"     . nil) ;; leave my enter alone!
                )

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))))
#+end_src

** Vertico 
#+begin_src emacs-lisp 
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    (setq vertico-cycle t))

  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp 
  (use-package orderless
    :init
    (setq completion-styles '(orderless flex basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Marginalia
#+begin_src emacs-lisp 
  (use-package marginalia
    :ensure t
    :custom 
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config
    (marginalia-mode))
#+end_src

** Completion Style
#+begin_src emacs-lisp 
(setq completion-styles '(orderless))
#+end_src

* Embark
#+begin_src emacs-lisp 
  (use-package embark
    :ensure t
    :bind
    (("s-." . embark-act)         ;; pick some comfortable binding
     ("s-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t 
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Dired
#+begin_src emacs-lisp 
  (use-package diredfl :ensure t
    :config
    (add-hook 'dired-mode-hook 'diredfl-mode))

  (setq dired-listing-switches "-alh1vGB --group-directories-first")

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  ;; Dired plus
  (add-to-list 'load-path "~/.emacs.d/dired+.el")
#+end_src

* Org mode
** Basic Org mode setup
#+begin_src emacs-lisp  
  (defun org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

  (defun org-font-setup ()
    ;; (font-lock-add-keywords 'org-mode
    ;; 			  '((" *\\([-]\\) "
    ;; 			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\(-->\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "→")))))))

  (use-package org
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-agenda-files '("~/OrgFiles/Studium.org"
                             "~/OrgFiles/Personal.org"
                             "~/OrgFiles/Termine.org"))
    (org-font-setup))

  (setq org-agenda-sorting-strategy '((agenda habit-down time-up ts-up
                                              priority-down category-keep)
                                      (todo priority-down category-keep)
                                      (tags priority-down category-keep)
                                      (search category-keep)))
  (define-skeleton org-skeleton
    "Header info for a emacs-org file."
    "Title: "
    "#+TITLE:" str " \n"
    "#+AUTHOR: Mario Baars\n")

  (global-set-key (kbd "C-c o s") 'org-skeleton)

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("○" "●" "○" "●" "○" "●" "○")))

  (with-eval-after-load 'org
    (require 'org-tempo)
    ;; Structure templates
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp "))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("c++" . "src C++"))
    ;; Org babel load languages
    (org-babel-do-load-languages 
     'org-babel-load-languages '((python . t) 
                                 (C . t)
                                 (shell . t))))

  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src

** Org Roam
#+begin_src emacs-lisp 
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :config
    (org-roam-setup))

  (use-package websocket
    :after org-roam)

  (use-package org-roam-ui
    :after org-roam 
    ;; or :after org
    ;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;; a hookable mode anymore, you're advised to pick something yourself
    ;; if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

* Vterm
#+begin_src emacs-lisp 
(use-package vterm)
(use-package multi-vterm)
#+end_src

* Tramp
#+begin_src emacs-lisp 
(require 'tramp)
(setq tramp-default-method "ssh")
#+end_src

* Fuzzyfinder
#+begin_src emacs-lisp 
  (use-package fzf
    :bind
    :config
    (setq fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll"
          fzf/executable "fzf"
          fzf/git-grep-args "-i --line-number %s"
          ;; command used for `fzf-grep-*` functions
          ;; example usage for ripgrep:
          fzf/grep-command "rg --no-heading -nH"
          ;; fzf/grep-command "grep -nrH"
          ;; If nil, the fzf buffer will appear at the top of the window
          fzf/position-bottom t
          fzf/window-height 10))
#+end_src

* EXWM
#+begin_src emacs-lisp  
  (start-process-shell-command "xrandr" nil "")

  (setq exwm-replace nil)

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 10)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;; Buffer list
            ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map (kbd "C-q") 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ([?\s-p] . exwm-reset)

            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-enable))

  ;; Make buffer name more meaningful
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))

  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

  (setq exwm-layout-show-all-buffers nil)
  (setq exwm-workspace-show-all-buffers nil)
#+end_src

* Text Editing
** Tree-sitter
#+begin_src emacs-lisp 
  (use-package tree-sitter
    :ensure t
    :after tree-sitter-langs
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
  (use-package tree-sitter-langs)
  (use-package tree-sitter-indent)
  (use-package evil-textobj-tree-sitter)
#+end_src
** Paredit
#+begin_src emacs-lisp 
  (use-package paredit)
  (use-package evil-paredit)
  (use-package paredit-everywhere)
  (global-set-key (kbd "M-(") 'paredit-wrap-sexp)
#+end_src

** eglot
#+begin_src emacs-lisp 
  (use-package eglot)
#+end_src

** Eldoc
#+begin_src emacs-lisp 
  (setq eldoc-echo-area-prefer-doc-buffer t)
  (setq eldoc-echo-area-use-mulitline-p nil)
  (global-eldoc-mode 1)
#+end_src

** Languages
*** Latex
#+begin_src emacs-lisp  
(use-package latex
  :ensure auctex
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t))

(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.4))
(setq org-preview-latex-default-process 'dvipng)
(setq-default TeX-master nil)
(setq TeX-show-compilation nil)
(setq TeX-electric-math nil)
(use-package auto-complete-auctex)
#+end_src>

*** Rust
#+begin_src emacs-lisp 
  (use-package rust-mode
    :ensure t)
  (setq lsp-rust-analyzer-cargo-watch-command "clippy")
#+end_src

*** ESS
#+begin_src emacs-lisp 
(use-package ess)
#+end_src

*** CSV
#+begin_src emacs-lisp 
(use-package csv)
(use-package csv-mode)
#+end_src

*** Python
#+begin_src emacs-lisp 
  (use-package ein)
  (setq ein:worksheet-enable-undo t)
  (setq ein:output-area-inlined-images t)
  (setq ein:slice-image t)
#+end_src

